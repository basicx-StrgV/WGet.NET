<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WGet.NET</name>
    </assembly>
    <members>
        <member name="T:WGetNET.Abstractions.WinGetInfoEntry`1">
            <summary>
            Represents a basic winget info entry.
            </summary>
            <typeparam name="T">
            The type of the derived class.
            </typeparam>
        </member>
        <member name="P:WGetNET.Abstractions.WinGetInfoEntry`1.EntryName">
            <summary>
            Gets the name of the info entry.
            </summary>
        </member>
        <member name="P:WGetNET.Abstractions.WinGetInfoEntry`1.RawContent">
            <summary>
            Gets the raw content of the info entry.
            </summary>
        </member>
        <member name="P:WGetNET.Abstractions.WinGetInfoEntry`1.HasShortenedContent">
            <summary>
            Gets if content of the package is shortened.
            </summary>
        </member>
        <member name="P:WGetNET.Abstractions.WinGetInfoEntry`1.IsEmpty">
            <summary>
            Gets if the object is empty.
            </summary>
        </member>
        <member name="M:WGetNET.Abstractions.WinGetInfoEntry`1.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Abstractions.WinGetInfoEntry`1"/> class.
            </summary>
            <param name="entryName">The name of the info entry.</param>
            <param name="rawContent">The content of the info entry.</param>
            <param name="hasShortenedContent">Sets if the content is shortened or not.</param>
        </member>
        <member name="M:WGetNET.Abstractions.WinGetInfoEntry`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.Abstractions.WinGetInfoEntry`1.Equals(`0)">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.Abstractions.WinGetInfoEntry`1.Clone">
            <inheritdoc/>
        </member>
        <member name="T:WGetNET.Abstractions.WinGetObjectBuilder`1">
            <summary>
            Base class for internal builders.
            </summary>
            <typeparam name="T">
            The type of the class the builder creates an instance of.
            The class needs to inherit <see cref="T:WGetNET.IWinGetObject"/>.
            </typeparam>
        </member>
        <member name="M:WGetNET.Abstractions.WinGetObjectBuilder`1.GetInstance">
            <summary>
            Returns an instance that is created from the data provided to the builder.
            </summary>
            <returns>
            The created instance.
            </returns>
        </member>
        <member name="M:WGetNET.Abstractions.WinGetObjectBuilder`1.Clear">
            <summary>
            Cleares all added data from the builder.
            </summary>
        </member>
        <member name="M:WGetNET.Abstractions.WinGetObjectBuilder`1.CheckShortenedValue(System.String)">
            <summary>
            Checks if the given value is possibly shortened.
            </summary>
            <returns>
            <see langword="true"/> if the value is shortened or <see langword="false"/> if not.
            </returns>
        </member>
        <member name="T:WGetNET.Builder.WinGetAdminSettingBuilder">
            <summary>
            Builder to create a new <see cref="T:WGetNET.WinGetAdminSetting"/> instance.
            </summary>
        </member>
        <member name="M:WGetNET.Builder.WinGetAdminSettingBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Builder.WinGetAdminSettingBuilder"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.Builder.WinGetAdminSettingBuilder.AddEntryName(System.String)">
            <summary>
            Addes the entry name for the winget info entry.
            </summary>
            <param name="entryName">The name of the info entry.</param>
        </member>
        <member name="M:WGetNET.Builder.WinGetAdminSettingBuilder.AddRawContent(System.String)">
            <summary>
            Adds the raw content of the winget info entry.
            </summary>
            <remarks>
            The data will be parsed to the content of the direcory entry.
            </remarks>
            <param name="rawContent">The raw data of the info entry as a <see cref="T:System.String"/></param>
        </member>
        <member name="M:WGetNET.Builder.WinGetAdminSettingBuilder.AddStatus(System.Boolean)">
            <summary>
            Adds the status of admin settings.
            </summary>
            <remarks>
            There is no need to add raw content after using this method.
            Using <see cref="M:WGetNET.Builder.WinGetAdminSettingBuilder.AddRawContent(System.String)"/> will override this value again.
            </remarks>
            <param name="status">
            The status of the admin setting.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetAdminSettingBuilder.GetInstance">
            <summary>
            Returns a <see cref="T:WGetNET.WinGetAdminSetting"/> instance from data provided to the builder.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetAdminSetting"/> instance, or <see langword="null"/> if the provided data failed to be parsed.
            </returns>
        </member>
        <member name="M:WGetNET.Builder.WinGetAdminSettingBuilder.Clear">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.Builder.WinGetAdminSettingBuilder.SetIsEnabled(System.String,System.Boolean)">
            <summary>
            Sets the is anabled value by parsing the raw content to a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="rawContent">
            A <see cref="T:System.String"/> containing the raw content.
            </param>
            <param name="hasShortenedContent">
            Indicates if the content is shortened or not.
            </param>
        </member>
        <member name="T:WGetNET.Builder.WinGetDirectoryBuilder">
            <summary>
            Builder to create a new <see cref="T:WGetNET.WinGetDirectory"/> instance.
            </summary>
        </member>
        <member name="M:WGetNET.Builder.WinGetDirectoryBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Builder.WinGetDirectoryBuilder"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.Builder.WinGetDirectoryBuilder.AddEntryName(System.String)">
            <summary>
            Addes the entry name for the winget info entry.
            </summary>
            <param name="entryName">The name of the info entry.</param>
        </member>
        <member name="M:WGetNET.Builder.WinGetDirectoryBuilder.AddRawContent(System.String)">
            <summary>
            Adds the raw content of the winget info entry.
            </summary>
            <remarks>
            The data will be parsed to the content of the direcory entry.
            </remarks>
            <param name="rawContent">The raw data of the info entry as a <see cref="T:System.String"/></param>
        </member>
        <member name="M:WGetNET.Builder.WinGetDirectoryBuilder.GetInstance">
            <summary>
            Returns a <see cref="T:WGetNET.WinGetDirectory"/> instance from data provided to the builder.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetDirectory"/> instance, or <see langword="null"/> if the provided data failed to be parsed.
            </returns>
        </member>
        <member name="M:WGetNET.Builder.WinGetDirectoryBuilder.Clear">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.Builder.WinGetDirectoryBuilder.SetDirectoryInfo(System.String,System.Boolean)">
            <summary>
            Creates and sets the <see cref="T:System.IO.DirectoryInfo"/> instance from the raw content.
            </summary>
            <param name="rawContent"><see cref="T:System.String"/> containing the raw data that should get parsed.</param>
            <param name="hasShortenedContent">Indcates if the information in the raw content is shortened.</param>
        </member>
        <member name="T:WGetNET.Builder.WinGetInfoBuilder">
            <summary>
            Builder to create a new <see cref="T:WGetNET.WinGetInfo"/> instance.
            </summary>
        </member>
        <member name="M:WGetNET.Builder.WinGetInfoBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Builder.WinGetInfoBuilder"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.Builder.WinGetInfoBuilder.AddVersion(System.String)">
            <summary>
            Adds the current winget version.
            </summary>
            <param name="version">
            The current winget version contained in a <see cref="T:System.String"/>.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetInfoBuilder.AddVersion(System.Version)">
            <summary>
            Adds the current winget version.
            </summary>
            <param name="version">
            The current winget version.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetInfoBuilder.AddDirectories(System.Collections.Generic.List{WGetNET.WinGetDirectory})">
            <summary>
            Adds a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetDirectory"/> objects.
            </summary>
            <param name="directories">
            The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetDirectory"/> objects.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetInfoBuilder.AddDirectory(WGetNET.WinGetDirectory)">
            <summary>
            Adds a <see cref="T:WGetNET.WinGetDirectory"/> object.
            </summary>
            <param name="directory">
            The <see cref="T:WGetNET.WinGetDirectory"/> object.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetInfoBuilder.AddLinks(System.Collections.Generic.List{WGetNET.WinGetLink})">
            <summary>
            Adds a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetLink"/> objects.
            </summary>
            <param name="links">
            The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetLink"/> objects.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetInfoBuilder.AddLink(WGetNET.WinGetLink)">
            <summary>
            Adds a <see cref="T:WGetNET.WinGetLink"/> object.
            </summary>
            <param name="link">
            The <see cref="T:WGetNET.WinGetLink"/> object.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetInfoBuilder.AddAdminOptions(System.Collections.Generic.List{WGetNET.WinGetAdminSetting})">
            <summary>
            Adds a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetAdminSetting"/> objects.
            </summary>
            <param name="adminOptions">
            The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetAdminSetting"/> objects.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetInfoBuilder.AddAdminOption(WGetNET.WinGetAdminSetting)">
            <summary>
            Adds a <see cref="T:WGetNET.WinGetAdminSetting"/> object.
            </summary>
            <param name="adminOption">
            The <see cref="T:WGetNET.WinGetAdminSetting"/> object.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetInfoBuilder.GetInstance">
            <summary>
            Returns a <see cref="T:WGetNET.WinGetInfo"/> instance from data provided to the builder.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetInfo"/> instance.
            </returns>
        </member>
        <member name="M:WGetNET.Builder.WinGetInfoBuilder.Clear">
            <inheritdoc/>
        </member>
        <member name="T:WGetNET.Builder.WinGetLinkBuilder">
            <summary>
            Builder to create a new <see cref="T:WGetNET.WinGetLink"/> instance.
            </summary>
        </member>
        <member name="M:WGetNET.Builder.WinGetLinkBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Builder.WinGetLinkBuilder"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.Builder.WinGetLinkBuilder.AddEntryName(System.String)">
            <summary>
            Addes the entry name for the winget info entry.
            </summary>
            <param name="entryName">The name of the info entry.</param>
        </member>
        <member name="M:WGetNET.Builder.WinGetLinkBuilder.AddRawContent(System.String)">
            <summary>
            Adds the raw content of the winget info entry.
            </summary>
            <remarks>
            The data will be parsed to the content of the direcory entry.
            </remarks>
            <param name="rawContent">The raw data of the info entry as a <see cref="T:System.String"/></param>
        </member>
        <member name="M:WGetNET.Builder.WinGetLinkBuilder.GetInstance">
            <summary>
            Returns a <see cref="T:WGetNET.WinGetLink"/> instance from data provided to the builder.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetLink"/> instance, or <see langword="null"/> if the provided data failed to be parsed.
            </returns>
        </member>
        <member name="M:WGetNET.Builder.WinGetLinkBuilder.Clear">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.Builder.WinGetLinkBuilder.SetUri(System.String,System.Boolean)">
            <summary>
            Creates and sets the <see cref="T:System.Uri"/> instance from the raw content.
            </summary>
            <param name="rawContent"><see cref="T:System.String"/> containing the raw data that should get parsed.</param>
            <param name="hasShortenedContent">Indcates if the information in the raw content is shortened.</param>
        </member>
        <member name="T:WGetNET.Builder.WinGetPackageBuilder">
            <summary>
            Builder to create a new <see cref="T:WGetNET.WinGetPackage"/> instance.
            </summary>
        </member>
        <member name="M:WGetNET.Builder.WinGetPackageBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Builder.WinGetPackageBuilder"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.Builder.WinGetPackageBuilder.AddName(System.String)">
            <summary>
            Addss the name of the package.
            </summary>
            <param name="name">
            The name of the package.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPackageBuilder.AddId(System.String)">
            <summary>
            Addss the id of the package.
            </summary>
            <remarks>
            The id will be parsed accordingly if a shortened id is detected.
            </remarks>
            <param name="id">
            The id of the package.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPackageBuilder.AddVersion(System.String)">
            <summary>
            Adds the current version of the package.
            </summary>
            <param name="version">
            The current version of the package contained in a <see cref="T:System.String"/>.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPackageBuilder.AddVersion(System.Version)">
            <summary>
            Adds the current version of the package.
            </summary>
            <param name="version">
            The current version of the package.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPackageBuilder.AddAvailableVersion(System.String)">
            <summary>
            Adds the heigest available version of the package.
            </summary>
            <param name="availableVersion">
            The heigest available version of the package contained in a <see cref="T:System.String"/>.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPackageBuilder.AddAvailableVersion(System.Version)">
            <summary>
            Adds the heigest available version of the package.
            </summary>
            <param name="availableVersion">
            The heigest available version of the package.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPackageBuilder.AddSourceName(System.String)">
            <summary>
            Adds the source name of the package.
            </summary>
            <param name="sourceName">
            The name of the source for the package.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPackageBuilder.GetInstance">
            <summary>
            Returns a <see cref="T:WGetNET.WinGetPackage"/> instance from data provided to the builder.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetPackage"/> instance.
            </returns>
        </member>
        <member name="M:WGetNET.Builder.WinGetPackageBuilder.Clear">
            <inheritdoc/>
        </member>
        <member name="T:WGetNET.Builder.WinGetPinnedPackageBuilder">
            <summary>
            Builder to create a new <see cref="T:WGetNET.WinGetPinnedPackage"/> instance.
            </summary>
        </member>
        <member name="M:WGetNET.Builder.WinGetPinnedPackageBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Builder.WinGetPinnedPackageBuilder"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.Builder.WinGetPinnedPackageBuilder.AddPinType(System.String)">
            <summary>
            Adds the pin type of the package.
            </summary>
            <param name="pinType">The packag pin type as a <see cref="T:System.String"/></param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPinnedPackageBuilder.AddPinnedVersion(System.String)">
            <summary>
            Adds the pinned version for the package.
            </summary>
            <param name="pinnedVersion">
            The pinned version of the of the package.
            This could be a single version or a version range.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPinnedPackageBuilder.AddName(System.String)">
            <summary>
            Addss the name of the package.
            </summary>
            <param name="name">
            The name of the package.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPinnedPackageBuilder.AddId(System.String)">
            <summary>
            Addss the id of the package.
            </summary>
            <remarks>
            The id will be parsed accordingly if a shortened id is detected.
            </remarks>
            <param name="id">
            The id of the package.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPinnedPackageBuilder.AddVersion(System.String)">
            <summary>
            Adds the current version of the package.
            </summary>
            <param name="version">
            The current version of the package contained in a <see cref="T:System.String"/>.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPinnedPackageBuilder.AddVersion(System.Version)">
            <summary>
            Adds the current version of the package.
            </summary>
            <param name="version">
            The current version of the package.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPinnedPackageBuilder.AddAvailableVersion(System.String)">
            <summary>
            Adds the heigest available version of the package.
            </summary>
            <param name="availableVersion">
            The heigest available version of the package contained in a <see cref="T:System.String"/>.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPinnedPackageBuilder.AddAvailableVersion(System.Version)">
            <summary>
            Adds the heigest available version of the package.
            </summary>
            <param name="availableVersion">
            The heigest available version of the package.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPinnedPackageBuilder.AddSourceName(System.String)">
            <summary>
            Adds the source name of the package.
            </summary>
            <param name="sourceName">
            The name of the source for the package.
            </param>
        </member>
        <member name="M:WGetNET.Builder.WinGetPinnedPackageBuilder.GetInstance">
            <summary>
            Returns a <see cref="T:WGetNET.WinGetPinnedPackage"/> instance from data provided to the builder.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetPinnedPackage"/> instance.
            </returns>
        </member>
        <member name="M:WGetNET.Builder.WinGetPinnedPackageBuilder.Clear">
            <inheritdoc/>
        </member>
        <member name="T:WGetNET.Components.Internal.ProcessManager">
            <summary>
            The <see langword="internal"/> class <see cref="T:WGetNET.Components.Internal.ProcessManager"/> 
            provides the winget process execution.
            </summary>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Components.Internal.ProcessManager"/> class.
            </summary>
            <param name="processName">
            The name of the process to execute.
            </param>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessManager.ExecuteWingetProcess(System.String)">
            <summary>
            Executes a winget process with the given command and returns the result.
            </summary>
            <param name="cmd">
            A <see cref="T:System.String"/> representing the command that winget should be executed with.
            </param>
            <returns>
            A <see cref="T:WGetNET.Models.ProcessResult"/> object, 
            containing the output an exit id of the process.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessManager.ExecuteWingetProcessAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronous executes a winget process with the given command and returns the result.
            </summary>
            <param name="cmd">
            A <see cref="T:System.String"/> representing the command that winget should be executed with.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:WGetNET.Models.ProcessResult"/> object, 
            containing the output an exit id of the process.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessManager.GetStartInfo(System.String)">
            <summary>
            Gets the start info for a process.
            </summary>
            <param name="cmd">
            String containig the arguments for the action.
            </param>
            <returns>
            A <see cref="T:System.Diagnostics.ProcessStartInfo"/> object, for the process.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessManager.RunProcess(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Runs a process with the current start informations.
            </summary>
            <param name="processStartInfo">
            The <see cref="T:System.Diagnostics.ProcessStartInfo"/> for process that should be executed.
            </param>
            <returns>
            A <see cref="T:WGetNET.Models.ProcessResult"/> object, 
            containing the output an exit id of the process.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessManager.RunProcessAsync(System.Diagnostics.ProcessStartInfo,System.Threading.CancellationToken)">
            <summary>
            Asynchronous runs a process with the current start informations.
            </summary>
            <param name="processStartInfo">
            The <see cref="T:System.Diagnostics.ProcessStartInfo"/> for process that should be executed.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:WGetNET.Models.ProcessResult"/> object, 
            containing the output an exit id of the process.
            </returns>
        </member>
        <member name="T:WGetNET.Components.Internal.ProcessOutputReader">
            <summary>
            The <see cref="T:WGetNET.Components.Internal.ProcessOutputReader"/> class,
            provieds methodes to read data from the output of the winget processes.
            </summary>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ToPackageList(System.String[],WGetNET.PackageAction,System.String)">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.List`1"/> 
            of output lines from a winget process to a list of <see cref="T:WGetNET.WinGetPackage"/>'s.
            </summary>
            <param name="output">
            A <see cref="T:System.Collections.Generic.List`1"/> of output lines from a winget process.
            </param>
            <param name="action">
            Sets info about the action that is executet.
            </param>
            <param name="sourceName">
            Name of the source used in the search or list by source action.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/>'s.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.CreatePackageListFromOutput(System.String[],System.Int32[],WGetNET.PackageAction,System.String)">
            <summary>
            Creates a package list from output.
            </summary>
            <param name="output">
            The <see langword="array"/> containing the output.
            </param>
            <param name="columnList">
            A <see cref="T:System.Int32"/> <see langword="array"/> containing the column start indexes.
            </param>
            <param name="action">
            Sets info about the action that is executet.
            </param>
            <param name="sourceName">
            Name of the source used in the search or list by source action.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/>'s.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ToPinnedPackageList(System.String[])">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.List`1"/> 
            of output lines from a winget process to a list of <see cref="T:WGetNET.WinGetPinnedPackage"/>'s.
            </summary>
            <param name="output">
            The <see langword="array"/> of output lines from a winget process.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPinnedPackage"/>'s.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.CreatePinnedPackageListFromOutput(System.String[],System.Int32[])">
            <summary>
            Creates a pinned package list from output.
            </summary>
            <param name="output">
            The <see langword="array"/> containing the output.
            </param>
            <param name="columnList">
            A <see cref="T:System.Int32"/> <see langword="array"/> containing the column start indexes.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPinnedPackage"/>'s.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ToSourceList(System.String[])">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.List`1"/> 
            of output lines from a winget process, that contains the sources in json format, to a list of <see cref="T:WGetNET.WinGetSource"/>'s.
            </summary>
            <param name="output">
            The <see langword="array"/> of output lines from a winget process.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/>'s.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ToWingetInfo(System.String[],WGetNET.InfoActionVersionId)">
            <summary>
            Creates a <see cref="T:WGetNET.WinGetInfo"/> object from the winget output.
            </summary>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <param name="actionVersionId">Containes info about the winget version range for the output.</param>
            <returns>
            The <see cref="T:WGetNET.WinGetInfo"/> object created from the output.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ReadVersionFromData(System.String[])">
            <summary>
            Reads the version number from the winget info output.
            </summary>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ReadDataByRange(System.String[],WGetNET.InfoActionVersionId)">
            <summary>
            Initializes the reading of the data for the specific version range.
            </summary>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <param name="actionVersionId">Containes info about the winget version range for the output.</param>
            <returns>
            The <see cref="T:WGetNET.WinGetInfo"/> object created from the output.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ReadDataForRange1(System.String[])">
            <summary>
            Reads the data from the winget info output for the version range 1.
            </summary>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <returns>
            The <see cref="T:WGetNET.WinGetInfo"/> object created from the output.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ReadDataForRange2(System.String[])">
            <summary>
            Reads the data from the winget info output for the version range 1.
            </summary>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <returns>
            The <see cref="T:WGetNET.WinGetInfo"/> object created from the output.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ReadDataForRange3(System.String[])">
            <summary>
            Reads the data from the winget info output for the version range 1.
            </summary>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <returns>
            The <see cref="T:WGetNET.WinGetInfo"/> object created from the output.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ReadDataForRange4(System.String[])">
            <summary>
            Reads the data from the winget info output for the version range 1.
            </summary>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <returns>
            The <see cref="T:WGetNET.WinGetInfo"/> object created from the output.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ReadSingleDirectoryEntry(System.String[],System.Int32)">
            <summary>
            Reads a single directory entry from the winget info output.
            </summary>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <param name="index">The index of the directory entry.</param>
            <returns>
            A <see cref="T:WGetNET.WinGetDirectory"/> instance if the action was successful, or null if it failed. 
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ReadDirectories(System.String[])">
            <summary>
            Reads all directories from the winget info output.
            </summary>
            <remarks>
            The first output entry needs to be the first directory entry.
            </remarks>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetDirectory"/> objects.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ReadLinks(System.String[])">
            <summary>
            Reads all links from the winget info output.
            </summary>
            <remarks>
            The first output entry needs to be the first link entry.
            </remarks>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetLink"/> objects.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ReadAdminSettings(System.String[])">
            <summary>
            Reads all admin options from the winget info output.
            </summary>
            <remarks>
            The first output entry needs to be the first admin option entry.
            </remarks>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetAdminSetting"/> objects.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ResultToHash(WGetNET.Models.ProcessResult)">
            <summary>
            Reads the hash from the winget hash action result.
            </summary>
            <param name="result">
            The <see cref="T:WGetNET.Models.ProcessResult"/> object of the action.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing the hash value.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.ExportOutputToString(WGetNET.Models.ProcessResult)">
            <summary>
            Writes the export result to a <see cref="T:System.String"/>.
            </summary>
            <param name="result">
            The <see cref="T:WGetNET.Models.ProcessResult"/> object containing the export data.
            </param>
            <returns>
            The <see cref="T:System.String"/> containing the export result.
            </returns>
        </member>
        <member name="M:WGetNET.Components.Internal.ProcessOutputReader.GetColumnList(System.String,System.Boolean)">
            <summary>
            Gets all column start indexes from the input line.
            </summary>
            <param name="line">
            A <see cref="T:System.String"/> containing the header, for column calculation.
            </param>
            <param name="isPinnedPackageTable">Activate workaround for the pinned package list.</param>
            <returns>
            A <see cref="T:System.Int32"/> <see langword="array"/> containing the column start indexes.
            </returns>
        </member>
        <member name="T:WGetNET.WinGet">
            <summary>
            The <see cref="T:WGetNET.WinGet"/> class offers informations about the installed winget version.
            </summary>
        </member>
        <member name="P:WGetNET.WinGet.IsInstalled">
            <summary>
            Gets if winget is installed on the system.
            </summary>
            <returns>
            <see langword="true"/> if winget is installed or <see langword="false"/> if not.
            </returns>
        </member>
        <member name="P:WGetNET.WinGet.IsPreview">
            <summary>
            Gets if the version of winget is a preview version.
            </summary>
            <returns>
            <see langword="true"/> if the winget version is a preview version or <see langword="false"/> if not.
            </returns>
        </member>
        <member name="P:WGetNET.WinGet.VersionString">
            <summary>
            Gets the version number of the winget installation.
            </summary>
            <returns>
            A <see cref="T:System.String"/> with the version number.
            </returns>
        </member>
        <member name="P:WGetNET.WinGet.Version">
            <summary>
            Gets the version number of the winget installation.
            </summary>
            <returns>
            A <see cref="T:System.Version"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGet"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.WinGet.ExportSettings">
            <summary>
            Exports the WinGet settings to a json string.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the settings json.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.ExportSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronous exports the WinGet settings to a json string.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.String"/> containing the settings json.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.ExportSettingsToFile(System.String)">
            <summary>
            Exports the WinGet settings to a json and writes them to the given file.
            </summary>
            <param name="file">
            The file for the export.
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull, and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>A provided argument is empty.</para>
            <para>-or-</para>
            <para>The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.ExportSettingsToFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronous exports the WinGet settings to a json and writes them to the given file.
            </summary>
            <param name="file">
            The file for the export.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the action.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>A provided argument is empty.</para>
            <para>-or-</para>
            <para>The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.GetAdminSettings">
            <summary>
            Gets all winget admin settings.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetAdminSetting"/> object.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.GetAdminSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets all winget admin settings.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetAdminSetting"/> object.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.EnableAdminSetting(System.String)">
            <summary>
            Enables the provided admin setting (Needs administrator rights).
            </summary>
            <param name="settingName">
            Name of the admin setting to enable.
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.EnableAdminSetting(WGetNET.WinGetAdminSetting)">
            <summary>
            Enables the provided admin setting (Needs administrator rights).
            </summary>
            <param name="setting">
            The <see cref="T:WGetNET.WinGetAdminSetting"/> to enable.
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.EnableAdminSettingAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously enables the provided admin setting (Needs administrator rights).
            </summary>
            <param name="settingName">
            Name of the admin setting to enable.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.EnableAdminSettingAsync(WGetNET.WinGetAdminSetting,System.Threading.CancellationToken)">
            <summary>
            Asynchronously enables the provided admin setting (Needs administrator rights).
            </summary>
            <param name="setting">
            The <see cref="T:WGetNET.WinGetAdminSetting"/> to enable.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.DisableAdminSetting(System.String)">
            <summary>
            Disables the provided admin setting (Needs administrator rights).
            </summary>
            <param name="settingName">
            Name of the admin setting to disable.
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.DisableAdminSetting(WGetNET.WinGetAdminSetting)">
            <summary>
            Disables the provided admin setting (Needs administrator rights).
            </summary>
            <param name="setting">
            The <see cref="T:WGetNET.WinGetAdminSetting"/> to disable.
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.DisableAdminSettingAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously disables the provided admin setting (Needs administrator rights).
            </summary>
            <param name="settingName">
            Name of the admin setting to disable.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.DisableAdminSettingAsync(WGetNET.WinGetAdminSetting,System.Threading.CancellationToken)">
            <summary>
            Asynchronously disables the provided admin setting (Needs administrator rights).
            </summary>
            <param name="setting">
            The <see cref="T:WGetNET.WinGetAdminSetting"/> to disable.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.GetInfo">
            <summary>
            Gets all WinGet related data provided by the WinGet info action.
            </summary>
            <returns>
            A <see cref="T:WGetNET.WinGetInfo"/> object containing winget related information.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.GetInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronous gets all WinGet related data provided by the WinGet info action.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:WGetNET.WinGetInfo"/> object containing winget related information.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.CheckWinGetVersion(System.Version,System.Version)">
            <summary>
            Checks if the installed WinGet version is between the given versions or the same.
            </summary>
            <remarks>
            If no max version is provided, no upper limit will be set.
            </remarks>
            <param name="minVersion">The min version for the check.</param>
            <param name="maxVersion">The max version for the check.</param>
            <returns>
            <see langword="true"/> if the installed WinGet version matches the check, or <see langword="false"/> if not.
            </returns>
        </member>
        <member name="M:WGetNET.WinGet.Execute(WGetNET.WinGetArguments,System.Boolean)">
            <summary>
            Exectutes a WinGet action from the given cmd.
            </summary>
            <param name="args">
            A <see cref="T:WGetNET.WinGetArguments"/> object containing the arguments for the WinGet process.
            </param>
            <param name="needsAdminRights">
            Sets if the process that should be executed needs administrator privileges.
            </param>
            <returns>
            The <see cref="T:WGetNET.Models.ProcessResult"/> for the process.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current process does not have administrator privileges. 
            (Only if <paramref name="needsAdminRights"/> is set to <see langword="true"/>)
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.ExecuteAsync(WGetNET.WinGetArguments,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously exectutes a WinGet action from the given cmd.
            </summary>
            <param name="args">
            A <see cref="T:WGetNET.WinGetArguments"/> object containing the arguments for the WinGet process.
            </param>
            <param name="needsAdminRights">
            Sets if the process that should be executed needs administrator privileges.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is the <see cref="T:WGetNET.Models.ProcessResult"/> for the process.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current process does not have administrator privileges.
            (Only if <paramref name="needsAdminRights"/> is set to <see langword="true"/>)
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.ThrowIfNotInstalled">
            <summary>
            Throws a <see cref="T:WGetNET.Exceptions.WinGetNotInstalledException"/> if winget installation could not be found.
            </summary>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.ThrowIfNotAdmin">
            <summary>
            Throws a <see cref="T:System.Security.SecurityException"/> if the current process does not have administrator privileges.
            </summary>
            <exception cref="T:System.Security.SecurityException">
            The current process does not have administrator privileges.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.CheckWinGetVersion">
            <summary>
            Checks the winget version and returns it as a <see cref="T:System.String"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the winget version.
            </returns>
        </member>
        <member name="M:WGetNET.WinGet.GetLastModificationData">
            <summary>
            Gets the last modification date (UTC) of the currently set winget executable.
            </summary>
            <returns>
            <see cref="T:System.DateTime"/> object of the last modification date (UTC).
            </returns>
        </member>
        <member name="M:WGetNET.WinGet.QueryInstallation">
            <summary>
            Checks the system for a winget installation.
            </summary>
            <returns>
            <see langword="true"/> if the installation was found and <see langword="false"/> if not.
            </returns>
        </member>
        <member name="T:WGetNET.WinGetPackageManager">
            <summary>
            The <see cref="T:WGetNET.WinGetPackageManager"/> class offers methods to manage packages with winget.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetPackageManager"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.SearchPackage(System.String,System.Boolean)">
            <summary>
            Uses the winget search function to search for a package that maches the given name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.SearchPackage(System.String,System.String,System.Boolean)">
            <summary>
            Uses the winget search function to search for a package that maches the given name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="sourceName">
            The name of the source for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.SearchPackageAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Uses the winget search function to asynchronously search for a package that maches the given name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.SearchPackageAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Uses the winget search function to asynchronously search for a package that maches the given name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="sourceName">
            The name of the source for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackages">
            <summary>
            Gets a list of all installed packages.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackages(System.String,System.Boolean)">
            <summary>
            Gets a list of all installed packages. That match the provided name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackages(System.String,System.String,System.Boolean)">
            <summary>
            Gets a list of all installed packages. That match the provided name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="sourceName">
            The name of the source for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackagesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a list of all installed packages.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackagesAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a list of all installed packages. That match the provided name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackagesAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a list of all installed packages. That match the provided name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="sourceName">
            The name of the source for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetExactInstalledPackage(System.String)">
            <summary>
            Gets a installed package, that matchs the provided id/name. If there are multiple matches, the first match will be returned.
            </summary>
            <remarks>
            This method does an internal match and does not use the winget "exact" functionality.
            </remarks>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <returns>
            A <see cref="T:WGetNET.WinGetPackage"/> instances or <see langword="null"/> if no match was found.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetExactInstalledPackage(System.String,System.String)">
            <summary>
            Gets a installed package, that matchs the provided id/name. If there are multiple matches, the first match will be returned.
            </summary>
            <remarks>
            This method does an internal match and does not use the winget "exact" functionality.
            </remarks>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="sourceName">
            The name of the source for the search.
            </param>
            <returns>
            A <see cref="T:WGetNET.WinGetPackage"/> instances or <see langword="null"/> if no match was found.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetExactInstalledPackageAsync(System.String)">
            <summary>
            Asynchronously gets a installed package, that matchs the provided id/name. If there are multiple matches, the first match will be returned.
            </summary>
            <remarks>
            This method does an internal match and does not use the winget "exact" functionality.
            </remarks>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <returns>
            A <see cref="T:WGetNET.WinGetPackage"/> instances or <see langword="null"/> if no match was found.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetExactInstalledPackageAsync(System.String,System.String)">
            <summary>
            Asynchronously gets a installed package, that matchs the provided id/name. If there are multiple matches, the first match will be returned.
            </summary>
            <remarks>
            This method does an internal match and does not use the winget "exact" functionality.
            </remarks>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="sourceName">
            The name of the source for the search.
            </param>
            <returns>
            A <see cref="T:WGetNET.WinGetPackage"/> instances or <see langword="null"/> if no match was found.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackage(System.String)">
            <summary>
            Install a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for the installation.</param>
            <returns>
            <see langword="true"/> if the installation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackage(System.String,System.Boolean)">
            <summary>
            Install a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for the installation.</param>
            <param name="silent">Request silent installation of packages.</param>
            <returns>
            <see langword="true"/> if the installation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackage(WGetNET.WinGetPackage)">
            <summary>
            Install a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the installation.</param>
            <returns>
            <see langword="true"/> if the installation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackage(WGetNET.WinGetPackage,System.Boolean)">
            <summary>
            Install a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the installation.</param>
            <param name="silent">Request silent installation of packages.</param>
            <returns>
            <see langword="true"/> if the installation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously install a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for the installation.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the installation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackageAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously install a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for the installation.</param>
            <param name="silent">Request silent installation of packages.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the installation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackageAsync(WGetNET.WinGetPackage,System.Threading.CancellationToken)">
            <summary>
            Asynchronously install a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the installation.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the installation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackageAsync(WGetNET.WinGetPackage,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously install a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the installation.</param>
            <param name="silent">Request silent installation of packages.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the installation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackage(System.String)">
            <summary>
            Uninsatll a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for uninstallation.</param>
            <returns>
            <see langword="true"/> if the uninstallation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackage(System.String,System.Boolean)">
            <summary>
            Uninsatll a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for uninstallation.</param>
            <param name="silent">Request silent package uninstall.</param>
            <returns>
            <see langword="true"/> if the uninstallation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackage(WGetNET.WinGetPackage)">
            <summary>
            Uninstall a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the uninstallation.</param>
            <returns>
            <see langword="true"/> if the uninstallation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackage(WGetNET.WinGetPackage,System.Boolean)">
            <summary>
            Uninstall a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the uninstallation.</param>
            <param name="silent" > Request silent package uninstall.</param>
            <returns>
            <see langword="true"/> if the uninstallation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously uninsatll a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for uninstallation.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the uninstallation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackageAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously uninsatll a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for uninstallation.</param>
            <param name="silent" > Request silent package uninstall.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the uninstallation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackageAsync(WGetNET.WinGetPackage,System.Threading.CancellationToken)">
            <summary>
            Asynchronously uninstall a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the uninstallation.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the uninstallation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackageAsync(WGetNET.WinGetPackage,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously uninstall a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the uninstallation.</param>
            <param name="silent" > Request silent package uninstall.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the uninstallation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetUpgradeablePackages">
            <summary>
            Get all upgradeable packages.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetUpgradeablePackagesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously get all upgradeable packages.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackage(System.String)">
            <summary>
            Upgrades a package using winget.
            </summary>
            <param name="packageId">The id or name of the package that should be upgraded.</param>
            <returns>
            <see langword="true"/> if the upgrade was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackage(System.String,System.Boolean)">
            <summary>
            Upgrades a package using winget.
            </summary>
            <param name="packageId">The id or name of the package that should be upgraded.</param>
            <param name="silent">Request silent upgrade of packages.</param>
            <returns>
            <see langword="true"/> if the upgrade was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackage(WGetNET.WinGetPackage)">
            <summary>
            Upgrades a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> that should be upgraded.</param>
            <returns>
            <see langword="true"/> if the upgrade was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackage(WGetNET.WinGetPackage,System.Boolean)">
            <summary>
            Upgrades a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> that should be upgraded.</param>
            <param name="silent">Request silent upgrade of packages.</param>
            <returns>
            <see langword="true"/> if the upgrade was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously upgrades a package using winget.
            </summary>
            <param name="packageId">The id or name of the package that should be upgraded.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the upgrade was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackageAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously upgrades a package using winget.
            </summary>
            <param name="packageId">The id or name of the package that should be upgraded.</param>
            <param name="silent">Request silent upgrade of packages.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the upgrade was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackageAsync(WGetNET.WinGetPackage,System.Threading.CancellationToken)">
            <summary>
            Asynchronously upgrades a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> that should be upgraded.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the upgrade was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackageAsync(WGetNET.WinGetPackage,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously upgrades a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> that should be upgraded.</param>
            <param name="silent">Request silent upgrade of packages.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the upgrade was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradeAllPackages">
            <summary>
            Tries to upgrade all packages using winget.
            </summary>
            <remarks>
            The action might run succesfully without upgrading every or even any package.
            </remarks>
            <returns>
            <see langword="true"/> if the action run successfully or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradeAllPackages(System.Boolean)">
            <summary>
            Tries to upgrade all packages using winget.
            </summary>
            <remarks>
            The action might run succesfully without upgrading every or even any package.
            </remarks>
            <param name="silent">Request silent upgrade of packages.</param>
            <returns>
            <see langword="true"/> if the action run successfully or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradeAllPackagesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously tries to upgrade all packages using winget.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <remarks>
            The action might run succesfully without upgrading every or even any package.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action run successfully or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradeAllPackagesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously tries to upgrade all packages using winget.
            </summary>
            <param name="silent">Request silent upgrade of packages.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <remarks>
            The action might run succesfully without upgrading every or even any package.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action run successfully or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.RepairPackage(System.String)">
            <summary>
            Repairs a package using winget.
            </summary>
            <remarks>Limited to packages with an installer that supports this function.</remarks>
            <param name="packageId">The id or name of the package for the repair action.</param>
            <returns>
            <see langword="true"/> if the repair action was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.RepairPackage(System.String,System.Boolean)">
            <summary>
            Repairs a package using winget.
            </summary>
            <remarks>Limited to packages with an installer that supports this function.</remarks>
            <param name="packageId">The id or name of the package for the repair action.</param>
            <param name="silent">Request silent package repair.</param>
            <returns>
            <see langword="true"/> if the repair action was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.RepairPackage(WGetNET.WinGetPackage)">
            <summary>
            Repairs a package using winget.
            </summary>
            <remarks>Limited to packages with an installer that supports this function.</remarks>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the repair action.</param>
            <returns>
            <see langword="true"/> if the repair action was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.RepairPackage(WGetNET.WinGetPackage,System.Boolean)">
            <summary>
            Repairs a package using winget.
            </summary>
            <remarks>Limited to packages with an installer that supports this function.</remarks>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the repair action.</param>
            <param name="silent">Request silent package repair.</param>
            <returns>
            <see langword="true"/> if the repair action was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.RepairPackageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously repairs a package using winget.
            </summary>
            <remarks>Limited to packages with an installer that supports this function.</remarks>
            <param name="packageId">The id or name of the package for the repair action.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the repair action was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.RepairPackageAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously repairs a package using winget.
            </summary>
            <remarks>Limited to packages with an installer that supports this function.</remarks>
            <param name="packageId">The id or name of the package for the repair action.</param>
            <param name="silent">Request silent package repair.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the repair action was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.RepairPackageAsync(WGetNET.WinGetPackage,System.Threading.CancellationToken)">
            <summary>
            Asynchronously repair a package using winget.
            </summary>
            <remarks>Limited to packages with an installer that supports this function.</remarks>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the repair action.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the repair action was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.RepairPackageAsync(WGetNET.WinGetPackage,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously repair a package using winget.
            </summary>
            <remarks>Limited to packages with an installer that supports this function.</remarks>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the repair action.</param>
            <param name="silent">Request silent package repair.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the repair action was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ExportPackagesToFile(System.String)">
            <summary>
            Exports a list of all installed winget packages as json to the given file.
            </summary>
            <param name="file">The file for the export.</param>
            <returns>
            <see langword="true"/> if the export was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ExportPackagesToFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously exports a list of all installed winget packages as json to the given file.
            </summary>
            <param name="file">The file for the export.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the export was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ImportPackagesFromFile(System.String)">
            <summary>
            Imports packages and trys to installes/upgrade all pakages in the list, if possible.
            </summary>
            <remarks>
            This may take some time and winget may not install/upgrade all packages.
            </remarks>
            <param name="file">The file with the package data for the import.</param>
            <returns>
            <see langword="true"/> if the import was compleatly successful or 
            <see langword="false"/> if some or all packages failed to install.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ImportPackagesFromFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously imports packages and trys to installes/upgrade all pakages in the list, if possible.
            </summary>
            <remarks>
            This may take some time and winget may not install/upgrade all packages.
            </remarks>
            <param name="file">The file with the package data for the import.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the import was compleatly successful or 
            <see langword="false"/> if some or all packages failed to install.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.Hash(System.String)">
            <summary>
            Executes the WinGet hash function, to calculate the hash for the given file.
            </summary>
            <param name="file">
            A <see cref="T:System.String"/> containing the path to the file.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing the hash.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Unable to find the specified file.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.Hash(System.IO.FileInfo)">
            <summary>
            Executes the WinGet hash function, to calculate the hash for the given file.
            </summary>
            <param name="file">
            A <see cref="T:System.IO.FileInfo"/> object, of the file the hash should be calculated for.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing the hash.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Unable to find the specified file.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.HashAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the WinGet hash function, to calculate the hash for the given file.
            </summary>
            <param name="file">
            A <see cref="T:System.String"/> containing the path to the file.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.String"/> containing the hash.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Unable to find the specified file.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.HashAsync(System.IO.FileInfo,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the WinGet hash function, to calculate the hash for the given file.
            </summary>
            <param name="file">
            A <see cref="T:System.IO.FileInfo"/> object, of the file the hash should be calculated for.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.String"/> containing the hash.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Unable to find the specified file.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.Download(System.String,System.String)">
            <summary>
            Downloads the installer of a package using winget.
            </summary>
            <param name="packageId">The id or name of the package to download.</param>
            <param name="directory">Directory path the files will be downloaded to. It will be created if it does not exist.</param>
            <returns>
            <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.Download(System.String,System.IO.DirectoryInfo)">
            <summary>
            Downloads the installer of a package using winget.
            </summary>
            <param name="packageId">The id or name of the package to download.</param>
            <param name="directory">
            A <see cref="T:System.IO.DirectoryInfo"/> object of the directory the files will be downloaded to. 
            It will be created if it does not exist.
            </param>
            <returns>
            <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.Download(WGetNET.WinGetPackage,System.String)">
            <summary>
            Downloads the installer of a package using winget.
            </summary>
            <param name="package">The package to download.</param>
            <param name="directory">Directory path the files will be downloaded to. It will be created if it does not exist.</param>
            <returns>
            <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.Download(WGetNET.WinGetPackage,System.IO.DirectoryInfo)">
            <summary>
            Downloads the installer of a package using winget.
            </summary>
            <param name="package">The package to download.</param>
            <param name="directory">
            A <see cref="T:System.IO.DirectoryInfo"/> object of the directory the files will be downloaded to. 
            It will be created if it does not exist.
            </param>
            <returns>
            <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.DownloadAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously downloads the installer of a package using winget.
            </summary>
            <param name="packageId">The id or name of the package to download.</param>
            <param name="directory">Directory path the files will be downloaded to. It will be created if it does not exist.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.DownloadAsync(System.String,System.IO.DirectoryInfo,System.Threading.CancellationToken)">
            <summary>
            Asynchronously downloads the installer of a package using winget.
            </summary>
            <param name="packageId">The id or name of the package to download.</param>
            <param name="directory">
            A <see cref="T:System.IO.DirectoryInfo"/> object of the directory the files will be downloaded to. 
            It will be created if it does not exist.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.DownloadAsync(WGetNET.WinGetPackage,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously downloads the installer of a package using winget.
            </summary>
            <param name="package">The package to download.</param>
            <param name="directory">Directory path the files will be downloaded to. It will be created if it does not exist.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.DownloadAsync(WGetNET.WinGetPackage,System.IO.DirectoryInfo,System.Threading.CancellationToken)">
            <summary>
            Asynchronously downloads the installer of a package using winget.
            </summary>
            <param name="package">The package to download.</param>
            <param name="directory">
            A <see cref="T:System.IO.DirectoryInfo"/> object of the directory the files will be downloaded to. 
            It will be created if it does not exist.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetPinnedPackages">
            <summary>
            Gets a list of all pinned packages.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetPinnedPackagesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a list of all pinned packages.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAdd(System.String,System.Boolean)">
            <summary>
            Adds a pinned package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAdd(System.String,System.String)">
            <summary>
            Adds a pinned package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAdd(WGetNET.WinGetPackage,System.Boolean)">
            <summary>
            Adds a pinned package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAdd(WGetNET.WinGetPackage,System.String)">
            <summary>
            Adds a pinned package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a pinned package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a pinned package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddAsync(WGetNET.WinGetPackage,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a pinned package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddAsync(WGetNET.WinGetPackage,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a pinned package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalled(System.String,System.Boolean)">
            <summary>
            Adds a pinned installed package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalled(System.String,System.String)">
            <summary>
            Adds a pinned installed package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalled(WGetNET.WinGetPackage,System.Boolean)">
            <summary>
            Adds a pinned installed package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalled(WGetNET.WinGetPackage,System.String)">
            <summary>
            Adds a pinned installed package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalledAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a pinned installed package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalledAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a pinned installed package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalledAsync(WGetNET.WinGetPackage,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a pinned installed package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalledAsync(WGetNET.WinGetPackage,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a pinned installed package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemove(System.String)">
            <summary>
            Removes a pinned package from winget.
            </summary>
            <param name="packageId">The id or name of the package to unpin.</param>
            <returns>
            <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemove(WGetNET.WinGetPackage)">
            <summary>
            Removes a pinned package from winget.
            </summary>
            <param name="package">The package to unpin.</param>
            <returns>
            <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemoveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes a pinned package from winget.
            </summary>
            <param name="packageId">The id or name of the package to unpin.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemoveAsync(WGetNET.WinGetPackage,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes a pinned package from winget.
            </summary>
            <param name="package">The package to unpin.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemoveInstalled(System.String)">
            <summary>
            Removes a pinned package from winget.
            </summary>
            <param name="packageId">The id or name of the package to unpin.</param>
            <returns>
            <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemoveInstalled(WGetNET.WinGetPackage)">
            <summary>
            Removes a pinned package from winget.
            </summary>
            <param name="package">The package to unpin.</param>
            <returns>
            <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemoveInstalledAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes a pinned package from winget.
            </summary>
            <param name="packageId">The id or name of the package to unpin.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemoveInstalledAsync(WGetNET.WinGetPackage,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes a pinned package from winget.
            </summary>
            <param name="package">The package to unpin.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ResetPins">
            <summary>
            Resets all pinned packages.
            </summary>
            <remarks>
            This will remove all pins and it is not possible to restore them.
            </remarks>
            <returns>
            <see langword="true"/> if the reset was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ResetPinsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously resets all pinned packages.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <remarks>
            This will remove all pins and it is not possible to restore them.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the reset was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.IncludeUnknownbyVersion(WGetNET.WinGetArguments)">
            <summary>
            Adds the '--include-unknown' flag to the given <see cref="T:WGetNET.WinGetArguments"/>
            when the winget version is higher then 1.4.0.
            </summary>
            <param name="arguments">
            <see cref="T:WGetNET.WinGetArguments"/> object to process.
            </param>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="T:WGetNET.WinGetSourceManager">
            <summary>
            The <see cref="T:WGetNET.WinGetSourceManager"/> class offers methods to manage the sources used by winget.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetSourceManager"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.GetInstalledSources">
            <summary>
            Gets a list of all sources that are installed in winget.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.GetInstalledSources(System.String)">
            <summary>
            Gets a list of installed sources that matches the provided name.
            </summary>
            <param name="sourceName">Name of the sources to export.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.GetInstalledSourcesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a list of all sources that are installed in winget.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.GetInstalledSourcesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a list of installed sources that matches the provided name.
            </summary>
            <param name="sourceName">Name of the sources to export.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSource(System.String,System.String)">
            <summary>
            Adds a new source to winget (Needs administrator rights).
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source to add.
            </param>
            <param name="arg">
            A <see cref="T:System.String"/> representing the sources URL or UNC.
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSource(System.String,System.String,System.String)">
            <summary>
            Adds a new source to winget (Needs administrator rights).
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source to add.
            </param>
            <param name="arg">
            A <see cref="T:System.String"/> representing the sources URL or UNC.
            </param>
            <param name="type">
            A <see cref="T:System.String"/> representing the source type.
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSource(WGetNET.WinGetSource)">
            <summary>
            Adds a new source to winget (Needs administrator rights).
            </summary>
            <param name="source">
            The <see cref="T:WGetNET.WinGetSource"/> to add.
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSource(System.Collections.Generic.IEnumerable{WGetNET.WinGetSource})">
            <summary>
            Adds multiple new sources to winget (Needs administrator rights).
            </summary>
            <param name="sources">
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects to add.
            </param>
            <returns>
            <see langword="true"/> if adding all sources was succesfull and <see langword="false"/> if one or more failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSourceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a new source to winget (Needs administrator rights).
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source to add.
            </param>
            <param name="arg">
            A <see cref="T:System.String"/> representing the sources URL or UNC.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSourceAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a new source to winget (Needs administrator rights).
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source to add.
            </param>
            <param name="arg">
            A <see cref="T:System.String"/> representing the sources URL or UNC.
            </param>
            <param name="type">
            A <see cref="T:System.String"/> representing the source type.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSourceAsync(WGetNET.WinGetSource,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a new source to winget (Needs administrator rights).
            </summary>
            <param name="source">
            The <see cref="T:WGetNET.WinGetSource"/> to add.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSourceAsync(System.Collections.Generic.IEnumerable{WGetNET.WinGetSource},System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds multiple new sources to winget (Needs administrator rights).
            </summary>
            <remarks>
            The source type is optional but some sources like the "msstore" need it or adding it wil throw an error.
            </remarks>
            <param name="sources">
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects to add.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if adding all sources was succesfull and <see langword="false"/> if one or more failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.UpdateSources">
            <summary>
            Updates all sources that are installed in winget.
            </summary>
            <remarks>
            This may take a while depending on the sources.
            </remarks>
            <returns>
            <see langword="true"/> if the update was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.UpdateSourcesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates all sources that are installed in winget.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <remarks>
            This may take a while depending on the sources.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the update was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFile(System.String)">
            <summary>
            Exports the winget sources in json format to a file.
            </summary>
            <remarks>
            If the provided file and/or path does not exist, they will be created.
            </remarks>
            <param name="file">The file for the export.</param>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>A provided argument is empty.</para>
            <para>-or-</para>
            <para>The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFile(System.String,System.String)">
            <summary>
            Exports the winget sources in json format to a file.
            </summary>
            <remarks>
            If the provided file and/or path does not exist, they will be created.
            </remarks>
            <param name="file">The file for the export.</param>
            <param name="sourceName">The name of the source for the export.</param>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>A provided argument is empty.</para>
            <para>-or-</para>
            <para>The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFile(System.String,WGetNET.WinGetSource)">
            <summary>
            Exports the winget sources in json format to a file.
            </summary>
            <remarks>
            If the provided file and/or path does not exist, they will be created.
            </remarks>
            <param name="file">
            The file for the export.
            </param>
            <param name="source">
            The <see cref="T:WGetNET.WinGetSource"/> for the export.
            </param>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>A provided argument is empty.</para>
            <para>-or-</para>
            <para>The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously exports the winget sources in json format to a file.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <remarks>
            If the provided file and/or path does not exist, they will be created.
            </remarks>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the action.
            </returns>
            <param name="file">The file for the export.</param>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>A provided argument is empty.</para>
            <para>-or-</para>
            <para>The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFileAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously exports the winget sources in json format to a file.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <remarks>
            If the provided file and/or path does not exist, they will be created.
            </remarks>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the action.
            </returns>
            <param name="file">The file for the export.</param>
            <param name="sourceName">The name of the source for the export.</param>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>A provided argument is empty.</para>
            <para>-or-</para>
            <para>The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFileAsync(System.String,WGetNET.WinGetSource,System.Threading.CancellationToken)">
            <summary>
            Asynchronously exports the winget sources in json format to a file.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <remarks>
            If the provided file and/or path does not exist, they will be created.
            </remarks>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the action.
            </returns>
            <param name="file">
            The file for the export.
            </param>
            <param name="source">
            The <see cref="T:WGetNET.WinGetSource"/> for the export.
            </param>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>A provided argument is empty.</para>
            <para>-or-</para>
            <para>The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ImportSourcesFromJson(System.String)">
            <summary>
            Imports sources into winget from a json string.
            </summary>
            <param name="jsonString">
            A <see cref="T:System.String"/> containing the json for multiple sources.
            </param>
            <returns>
            <see langword="true"/> if importing all sources was successful and <see langword="false"/> if on or more failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.InvalidJsonException">
            The provided JSON could not be deserialized.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ImportSourcesFromJsonAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously imports sources into winget from a json string.
            </summary>
            <param name="jsonString">
            A <see cref="T:System.String"/> containing the json for multiple sources.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if importing all sources was successful and <see langword="false"/> if on or more failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.InvalidJsonException">
            The provided JSON could not be deserialized.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ResetSources">
            <summary>
            Resets all sources that are installed in winget (Needs administrator rights).
            </summary>
            <remarks>
            This may take a while depending on the sources.
            </remarks>
            <returns>
            <see langword="true"/> if the reset was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ResetSourcesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously resets all sources that are installed in winget (Needs administrator rights).
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <remarks>
            This may take a while depending on the sources.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the reset was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.RemoveSources(System.String)">
            <summary>
            Removes a source from winget (Needs administrator rights).
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source.
            </param>
            <returns>
            <see langword="true"/> if the remove was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.RemoveSources(WGetNET.WinGetSource)">
            <summary>
            Removes a source from winget (Needs administrator rights).
            </summary>
            <param name="source">
            The <see cref="T:WGetNET.WinGetSource"/> to remove.
            </param>
            <returns>
            <see langword="true"/> if the remove was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.RemoveSourcesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes a source from winget (Needs administrator rights).
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the remove was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.RemoveSourcesAsync(WGetNET.WinGetSource,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes a source from winget (Needs administrator rights).
            </summary>
            <param name="source">
            The <see cref="T:WGetNET.WinGetSource"/> to remove.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the remove was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.SourcesToJson(System.Collections.Generic.IEnumerable{WGetNET.WinGetSource})">
            <summary>
            Generates a valid json string from the provided sources.
            </summary>
            <param name="sources">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing the generated json.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="T:WGetNET.WinGetAdminSetting">
            <summary>
            Represents a winget admin settings entry.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetAdminSetting.IsEnabled">
            <summary>
            Gets if the admin option is enabled.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetAdminSetting.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetAdminSetting"/> class.
            </summary>
            <param name="entryName">The name of the settings entry.</param>
            <param name="rawContent">The content of the settings entry.</param>
            <param name="hasShortenedContent">Sets if the content is shortened or not.</param>
            <param name="isEnabled">Idicator for the setting state.</param>
        </member>
        <member name="M:WGetNET.WinGetAdminSetting.Equals(WGetNET.WinGetAdminSetting)">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.WinGetAdminSetting.Clone">
            <inheritdoc/>
        </member>
        <member name="T:WGetNET.WinGetArguments">
            <summary>
            Represents a winget arguments string for different winget actions.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetArguments.Arguments">
            <summary>
            Gets the generated arguments.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetArguments.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.WinGetArguments.#ctor(System.String,WGetNET.WinGetArguments.WinGetAction)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetArguments"/> class.
            </summary>
            <param name="baseCmd">
            The base cmd of the arguments.
            </param>
            <param name="action">
            The WinGet action that will be executet. Changes the behavier of some flags.
            </param>
        </member>
        <member name="M:WGetNET.WinGetArguments.WinGet">
            <summary>
            Creates a new winget arguments object with no base cmd. 
            Used for direct callin of the winget cmd with flags.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Settings">
            <summary>
            Creates a new winget arguments object with "settings" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.SettingsExport">
            <summary>
            Creates a new winget arguments object with "settings export" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.List">
            <summary>
            Creates a new winget arguments object with "list" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Search">
            <summary>
            Creates a new winget arguments object with "search" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Install">
            <summary>
            Creates a new winget arguments object with "install" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Upgrade">
            <summary>
            Creates a new winget arguments object with "upgrade" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Uninstall">
            <summary>
            Creates a new winget arguments object with "uninstall" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Download">
            <summary>
            Creates a new winget arguments object with "download" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Repair">
            <summary>
            Creates a new winget arguments object with "repair" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Export">
            <summary>
            Creates a new winget arguments object with "export" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Import">
            <summary>
            Creates a new winget arguments object with "import" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Hash">
            <summary>
            Creates a new winget arguments object with "hash" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.PinList">
            <summary>
            Creates a new winget arguments object with "pin list" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.PinAdd">
            <summary>
            Creates a new winget arguments object with "pin add" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.PinRemove">
            <summary>
            Creates a new winget arguments object with "pin remove" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.PinReset">
            <summary>
            Creates a new winget arguments object with "pin reset" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.SourceAdd">
            <summary>
            Creates a new winget arguments object with "source add" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.SourceRemove">
            <summary>
            Creates a new winget arguments object with "source remove" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.SourceUpdate">
            <summary>
            Creates a new winget arguments object with "source update" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.SourceReset">
            <summary>
            Creates a new winget arguments object with "source reset" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.SourceExport">
            <summary>
            Creates a new winget arguments object with "source export" as the base cmd.
            </summary>
            <returns>
            The created <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Query(System.String)">
            <summary>
            Adds a query to the arguments.
            </summary>
            <remarks>
            Mainly used for Package based actions.
            </remarks>
            <param name="query">
            The <see cref="T:System.String"/> that should be added as a query.
            </param>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Source(System.String)">
            <summary>
            Adds a source query to the arguments.
            </summary>
            <param name="source">
            The <see cref="T:System.String"/> that contains the source name.
            </param>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.File(System.String)">
            <summary>
            Adds a file path to the arguments.
            </summary>
            <remarks>
            Behavior depends on base cmd. If the base cmd does not read or write from or to a file, the function will do nothing.
            </remarks>
            <param name="file">
            The <see cref="T:System.String"/> that contains the file path.
            </param>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Directory(System.String)">
            <summary>
            Adds a directory path to the arguments.
            </summary>
            <remarks>
            Behavior depends on base cmd. If the base cmd does not need a directory, the function will do nothing.
            </remarks>
            <param name="directory">
            The <see cref="T:System.String"/> that contains the directory.
            </param>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Enable(System.String)">
            <summary>
            Adds a enable action to the arguments.
            </summary>
            <param name="query">
            A <see cref="T:System.String"/> containing the option to enable.
            </param>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Disable(System.String)">
            <summary>
            Adds a disable action to the arguments.
            </summary>
            <param name="query">
            A <see cref="T:System.String"/> containing the option to disable.
            </param>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Name(System.String)">
            <summary>
            Adds name data to the arguments.
            </summary>
            <remarks>
            Mainly used for Source based actions.
            </remarks>
            <param name="name">
            A <see cref="T:System.String"/> containing the name to add to the arguments.
            </param>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Arg(System.String)">
            <summary>
            Adds arg (Source argument) data to the arguments.
            </summary>
            <remarks>
            Mainly used for Source based actions.
            </remarks>
            <param name="arg">
            A <see cref="T:System.String"/> containing the arg (Source argument) to add to the arguments.
            </param>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Type(System.String)">
            <summary>
            Adds type data to the arguments.
            </summary>
            <remarks>
            Mainly used for Source based actions.
            </remarks>
            <param name="type">
            A <see cref="T:System.String"/> containing the type data to add to the arguments.
            </param>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Version(System.String)">
            <summary>
            Adds a version query to the arguments.
            </summary>
            <param name="version">
            The <see cref="T:System.String"/> that contains the version.
            </param>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Version">
            <summary>
            Adds a version query to the arguments.
            </summary>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Exact">
            <summary>
            Adds the '--exact' flag to the arguments.
            </summary>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Silent">
            <summary>
            Adds the '--silent' flag to the arguments.
            </summary>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.All">
            <summary>
            Adds the '--all' flag to the arguments.
            </summary>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.IncludeUnknown">
            <summary>
            Adds the '--include-unknown' flag to the arguments.
            </summary>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.AcceptSourceAgreements">
            <summary>
            Adds the '--accept-source-agreements' flag to the arguments.
            </summary>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.AcceptPackageAgreements">
            <summary>
            Adds the '--accept-package-agreements' flag to the arguments.
            </summary>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.IgnoreUnavailable">
            <summary>
            Adds the '--ignore-unavailable' flag to the arguments.
            </summary>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Installed">
            <summary>
            Adds the '--installed' flag to the arguments.
            </summary>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Blocking">
            <summary>
            Adds the '--blocking' flag to the arguments.
            </summary>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Force">
            <summary>
            Adds the '--force' flag to the arguments.
            </summary>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.Info">
            <summary>
            Adds the '--info' flag to the arguments.
            </summary>
            <returns>
            The updated <see cref="T:WGetNET.WinGetArguments"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetArguments.ToString">
            <inheritdoc/>
        </member>
        <member name="T:WGetNET.WinGetDirectory">
            <summary>
            Represents a winget directory in the info set.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetDirectory.Exists">
            <summary>
            Gets a value indicating whether the directory exists.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetDirectory.Name">
            <summary>
            Gets the name of the directory.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetDirectory.FullName">
            <summary>
            Gets the full path of the directory.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetDirectory.Info">
            <summary>
            Gets the direcory info instance.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetDirectory.#ctor(System.String,System.String,System.Boolean,System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetDirectory"/> class.
            </summary>
            <param name="entryName">The name of the settings entry.</param>
            <param name="rawContent">The content of the settings entry.</param>
            <param name="hasShortenedContent">Sets if the content is shortened or not.</param>
            <param name="directoryInfo"><see cref="T:System.IO.DirectoryInfo"/> instance that was created from the raw content.</param>
        </member>
        <member name="M:WGetNET.WinGetDirectory.Equals(WGetNET.WinGetDirectory)">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.WinGetDirectory.Clone">
            <inheritdoc/>
        </member>
        <member name="T:WGetNET.WinGetInfo">
            <summary>
            Represents winget related information.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetInfo.VersionString">
            <summary>
            Gets the version number of the winget installation as a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetInfo.Version">
            <summary>
            Gets the version number of the winget installation.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetInfo.Directories">
            <summary>
            Gets a collection of the winget direcories.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetInfo.Links">
            <summary>
            Gets a collection of the winget related links.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetInfo.AdminSettings">
            <summary>
            Gets a collection of the winget admin settings.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetInfo.IsEmpty">
            <summary>
            Gets if the object is empty.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetInfo.Empty">
            <summary>
            Gets an empty instance of this object.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetInfo.#ctor(System.String,System.Version,System.Collections.Generic.List{WGetNET.WinGetDirectory},System.Collections.Generic.List{WGetNET.WinGetLink},System.Collections.Generic.List{WGetNET.WinGetAdminSetting})">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetInfo"/> class.
            </summary>
            <param name="versionString">The installed winget version as a <see cref="T:System.String"/>.</param>
            <param name="version">The installed winget version.</param>
            <param name="directories">
            <see cref="T:System.Collections.Generic.List`1"/> of info entries containing the WinGet directories.
            </param>
            <param name="links">
            <see cref="T:System.Collections.Generic.List`1"/> of info entries containing WinGet related links.
            </param>
            <param name="adminSettings">
            <see cref="T:System.Collections.Generic.List`1"/> of info entries containing the WinGet admin setting states.
            </param>
        </member>
        <member name="T:WGetNET.WinGetLink">
            <summary>
            Represents a winget link in the info set.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetLink.Url">
            <summary>
            Gets the url.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetLink.#ctor(System.String,System.String,System.Boolean,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetLink"/> class.
            </summary>
            <param name="entryName">The name of the settings entry.</param>
            <param name="rawContent">The content of the settings entry.</param>
            <param name="hasShortenedContent">Sets if the content is shortened or not.</param>
            <param name="url"><see cref="T:System.Uri"/> instance containing the url.</param>
        </member>
        <member name="M:WGetNET.WinGetLink.Equals(WGetNET.WinGetLink)">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.WinGetLink.Clone">
            <inheritdoc/>
        </member>
        <member name="T:WGetNET.WinGetPackage">
            <summary>
            Represents a winget package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.Name">
            <summary>
            Gets the name of the package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.Id">
            <summary>
            Gets the id of the package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.VersionString">
            <summary>
            Gets the version of the package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.Version">
            <summary>
            Gets the version of the package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.AvailableVersionString">
            <summary>
            Gets the newest available version of the package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.AvailableVersion">
            <summary>
            Gets the newest available version of the package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.SourceName">
            <summary>
            Gets the source name for the package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.HasShortenedId">
            <summary>
            Gets if id of the package is shortened.
            </summary>
            <remarks>
            The name of the package will be used for all actions performd with this package.
            </remarks>
        </member>
        <member name="P:WGetNET.WinGetPackage.HasNoId">
            <summary>
            Gets if the package does not provide an id.
            </summary>
            <remarks>
            If this is true somthing whent wrong in the creation of the package.
            The name of the package will be used for all actions performd with this package.
            </remarks>
        </member>
        <member name="P:WGetNET.WinGetPackage.HasUpgrade">
            <summary>
            Gets if the package can be upgraded.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.IsEmpty">
            <summary>
            Gets if the object is empty.
            </summary>
            <remarks>
            A package object counts as empty if it does not contain a id and name.
            Because the rest of the information is useless in this state.
            </remarks>
        </member>
        <member name="M:WGetNET.WinGetPackage.#ctor(System.String,System.String,System.String,System.Version,System.String,System.Version,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetPackage"/> class.
            </summary>
            <param name="name">The name of the package.</param>
            <param name="id">The id of the package.</param>
            <param name="versionString">The current version of the package as a <see cref="T:System.String"/>.</param>
            <param name="version">The current version of the package.</param>
            <param name="availableVersion">Heighest available version of the package.</param>
            <param name="availableVersionString">Heighest available version of the package as a <see cref="T:System.String"/>.</param>
            <param name="sourceName">Name of the source the package comes from.</param>
            <param name="hasShortenedId">Sets if the id is shortened or not.</param>
        </member>
        <member name="M:WGetNET.WinGetPackage.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:WGetNET.WinGetPackage"/> class and returns it.
            </summary>
            <param name="name">The name of the package.</param>
            <param name="id">The id of the package.</param>
            <param name="version">The current version of the package as a <see cref="T:System.String"/>. It will also be used for the available version.</param>
            <param name="sourceName">The name of the source the package comes from.</param>
            <returns>
            The created instance of the <see cref="T:WGetNET.WinGetPackage"/> class.
            </returns>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackage.Create(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:WGetNET.WinGetPackage"/> class and returns it.
            </summary>
            <param name="name">The name of the package.</param>
            <param name="id">The id of the package.</param>
            <param name="version">The current version of the package as a <see cref="T:System.String"/>.</param>
            <param name="availableVersion">The highest available version of the package as a <see cref="T:System.String"/>.</param>
            <param name="sourceName">The name of the source the package comes from.</param>
            <returns>
            The created instance of the <see cref="T:WGetNET.WinGetPackage"/> class.
            </returns>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackage.Create(System.String,System.String,System.Version,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:WGetNET.WinGetPackage"/> class and returns it.
            </summary>
            <param name="name">The name of the package.</param>
            <param name="id">The id of the package.</param>
            <param name="version">The current version of the package. It will also be used for the available version.</param>
            <param name="sourceName">The name of the source the package comes from.</param>
            <returns>
            The created instance of the <see cref="T:WGetNET.WinGetPackage"/> class.
            </returns>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackage.Create(System.String,System.String,System.Version,System.Version,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:WGetNET.WinGetPackage"/> class and returns it.
            </summary>
            <param name="name">The name of the package.</param>
            <param name="id">The id of the package.</param>
            <param name="version">The current version of the package.</param>
            <param name="availableVersion">The highest available version of the package.</param>
            <param name="sourceName">The name of the source the package comes from.</param>
            <returns>
            The created instance of the <see cref="T:WGetNET.WinGetPackage"/> class.
            </returns>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackage.SamePackage(WGetNET.WinGetPackage,System.Boolean)">
            <summary>
            Checks if two packages are the same and optionally if they also have the same version. 
            </summary>
            <param name="other">
            The <see cref="T:WGetNET.WinGetPackage"/> to compare with.
            </param>
            <param name="sameVersion">
            Set to <see langword="true"/> to also check for the same version.
            </param>
            <returns>
            <see langword="true"/> if both packages are the same and <see langword="false"/> if not.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetPackage.Clone">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.WinGetPackage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:WGetNET.WinGetPinnedPackage">
            <summary>
            Represents a winget pinned package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.PinTypeString">
            <summary>
            Gets the pin type of the package as a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.PinnedVersion">
            <summary>
            Gets the pinned version or version range.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.PinType">
            <summary>
            Gets the pin type of the package.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetPinnedPackage.#ctor(System.String,WGetNET.PinType,System.String,System.String,System.String,System.String,System.Version,System.String,System.Version,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetPinnedPackage"/> class.
            </summary>
            <param name="pinTypeString">Name of the winget pin type for the package.</param>
            <param name="pinType">The <see cref="T:WGetNET.PinType"/> of the package.</param>
            <param name="pinnedVersion"><see cref="T:System.String"/> containing the pinned version for the package.</param>
            <param name="hasShortenedId">Sets if the id is shortened or not.</param>
            <param name="name">The name of the package.</param>
            <param name="id">The id of the package.</param>
            <param name="versionString">The current version of the package as a <see cref="T:System.String"/>.</param>
            <param name="version">The current version of the package.</param>
            <param name="availableVersionString">Heighest available version of the package as a <see cref="T:System.String"/>.</param>
            <param name="availableVersion">Heighest available version of the package.</param>
            <param name="sourceName">Name of the source the package comes from.</param>
        </member>
        <member name="M:WGetNET.WinGetPinnedPackage.Clone">
            <inheritdoc/>
        </member>
        <member name="T:WGetNET.WinGetSource">
            <summary>
            Represents a winget source.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetSource.Name">
            <summary>
            Gets the name of the source.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetSource.Arg">
            <summary>
            Gets the URL/UNC of the source.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetSource.Uri">
            <summary>
            Gets the uri of the source.
            </summary>
            <remarks>
            <see langword="null"/> if <see cref="P:WGetNET.WinGetSource.Arg"/> can't be parsed to a <see cref="T:System.Uri"/> instance.
            </remarks>
        </member>
        <member name="P:WGetNET.WinGetSource.Type">
            <summary>
            Gets the type of the source.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetSource.Data">
            <summary>
            Gets the data of the source.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetSource.Identifier">
            <summary>
            Gets the identifier of the source.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetSource.Explicit">
            <summary>
            Gets whether the source was explicitly added.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetSource.TrustLevel">
            <summary>
            Gets the trust level of the source.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetSource.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.WinGetSource.#ctor(System.String,System.String,System.Uri,System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetSource"/> class.
            </summary>
            <param name="name">The name of the source.</param>
            <param name="arg">The URL or UNC of the source.</param>
            <param name="uri">The URI of the source.</param>
            <param name="type">Type identifier of the source.</param>
            <param name="data">Data of the source source. This field is only used by some sources.</param>
            <param name="identifier">The identifier of the package</param>
            <param name="explicitSource">Indicates if the source was explicitly added.</param>
            <param name="trustLevel">Trust level of the source.</param>
        </member>
        <member name="M:WGetNET.WinGetSource.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:WGetNET.WinGetSource"/> class and returns it.
            </summary>
            <param name="name">The name of the source.</param>
            <param name="identifier">The identifier of the source.</param>
            <param name="arg">The URL or UNC of the source.</param>
            <param name="type">The type identifier for the source.</param>
            <returns>
            The created instance of the <see cref="T:WGetNET.WinGetSource"/> class.
            </returns>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSource.Create(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:WGetNET.WinGetSource"/> class and returns it.
            </summary>
            <param name="name">The name of the source.</param>
            <param name="identifier">The identifier of the source.</param>
            <param name="arg">The URL or UNC of the source.</param>
            <param name="type">The type identifier for the source.</param>
            <param name="data">The data field of the source.</param>
            <returns>
            The created instance of the <see cref="T:WGetNET.WinGetSource"/> class.
            </returns>
            <exception cref="T:System.ArgumentException">
            A provided argument is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSource.FromSourceModel(WGetNET.Models.SourceModel)">
            <summary>
            Creates a <see cref="T:WGetNET.WinGetSource"/> instance from a <see cref="T:WGetNET.Models.SourceModel"/> instance.
            </summary>
            <param name="model">The <see cref="T:WGetNET.Models.SourceModel"/> instance.</param>
            <returns>
            The created <see cref="T:WGetNET.WinGetSource"/> instance.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetSource.Clone">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.WinGetSource.ToString">
            <inheritdoc/>
        </member>
        <member name="T:WGetNET.InfoActionVersionId">
            <summary>
            Defines identifiers for all version ranges that generate a different output when using "winget --info".
            </summary>
        </member>
        <member name="F:WGetNET.InfoActionVersionId.VersionRange1">
            <summary>
            First WinGet version to version 1.4.3132
            </summary>
        </member>
        <member name="F:WGetNET.InfoActionVersionId.VersionRange2">
            <summary>
            Version 1.4.3531 to version 1.5.101
            </summary>
        </member>
        <member name="F:WGetNET.InfoActionVersionId.VersionRange3">
            <summary>
            Version 1.5.441
            </summary>
        </member>
        <member name="F:WGetNET.InfoActionVersionId.VersionRange4">
            <summary>
            Version 1.5.1081 to newest version
            </summary>
        </member>
        <member name="T:WGetNET.PinType">
            <summary>
            Enum of winget pin types.
            </summary>
        </member>
        <member name="F:WGetNET.PinType.Pinning">
            <summary>
            The package is pinned.
            </summary>
            <remarks>
            Package can't be updatet automatically.
            </remarks>
        </member>
        <member name="F:WGetNET.PinType.Blocking">
            <summary>
            The package is blocked.
            </summary>
            <remarks>
            Package can't be updatet automatically and manually.
            </remarks>
        </member>
        <member name="F:WGetNET.PinType.Gating">
            <summary>
            The package is gated.
            </summary>
            <remarks>
            Package can't be updated to versions, that are not contained in the provided pinned version.
            </remarks>
        </member>
        <member name="T:WGetNET.Exceptions.InvalidJsonException">
            <summary>
            Exception that gets thrown if the provided json string could not be deserialized.
            </summary>
        </member>
        <member name="P:WGetNET.Exceptions.InvalidJsonException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:WGetNET.Exceptions.InvalidJsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.InvalidJsonException"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.Exceptions.InvalidJsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.InvalidJsonException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
        </member>
        <member name="M:WGetNET.Exceptions.InvalidJsonException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.InvalidJsonException"/> class.
            </summary>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WGetNET.Exceptions.InvalidJsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.InvalidJsonException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WGetNET.Exceptions.InvalidJsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.InvalidJsonException"/> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            <summary>
            Exception that gets thrown if a winget feature is not supportet in the installed winget version.
            </summary>
        </member>
        <member name="P:WGetNET.Exceptions.WinGetFeatureNotSupportedException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetFeatureNotSupportedException.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException"/> class.
            </summary>
            <param name="minVersion">Min WinGet version needed for the feature</param>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetFeatureNotSupportedException.#ctor(System.Version,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException"/> class.
            </summary>
            <param name="minVersion">Min WinGet version needed for the feature</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetFeatureNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException"/> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:WGetNET.Exceptions.WinGetNotInstalledException">
            <summary>
            Exception that gets thrown if winget is not installed.
            </summary>
        </member>
        <member name="P:WGetNET.Exceptions.WinGetNotInstalledException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetNotInstalledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetNotInstalledException"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetNotInstalledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetNotInstalledException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetNotInstalledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetNotInstalledException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetNotInstalledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetNotInstalledException"/> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:WGetNET.Extensions.ArrayExtensions">
            <summary>
            The <see langword="static"/> <see cref="T:WGetNET.Extensions.ArrayExtensions"/> class,
            provieds extension methods for generic and type specific arrays.
            </summary>
        </member>
        <member name="M:WGetNET.Extensions.ArrayExtensions.Add``1(``0[],``0)">
            <summary>
            Adds a new entry to a <see langword="array"/>.
            </summary>
            <typeparam name="T">
            The type of the <see langword="array"/>.
            </typeparam>
            <param name="array">
            The input <see langword="array"/> for the action.
            </param>
            <param name="value">
            The value to add to the <see langword="array"/>.
            </param>
            <returns>
            The <see langword="array"/> with the added entry.
            </returns>
        </member>
        <member name="M:WGetNET.Extensions.ArrayExtensions.RemoveRange``1(``0[],System.Int32,System.Int32)">
            <summary>
            Removes a range of entrys from a <see langword="array"/>.
            </summary>
            <typeparam name="T">
            The type of the <see langword="array"/>.
            </typeparam>
            <param name="array">
            The input <see langword="array"/> for the action.
            </param>
            <param name="index">
            A <see cref="T:System.Int32"/> representing the zero based start index.
            </param>
            <param name="count">
            A <see cref="T:System.Int32"/> representing the number of elements to remove.
            </param>
            <returns>
            The <see langword="array"/> with the range of entrys removed.
            </returns>
        </member>
        <member name="M:WGetNET.Extensions.ArrayExtensions.GetEntryContains(System.String[],System.String)">
            <summary>
            Searches for an entry in a <see langword="array"/> that contains the given string.
            </summary>
            <param name="array">
            The input <see langword="array"/> for the action.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> representing the value to check for.
            </param>
            <returns>
            A <see cref="T:System.Int32"/> representing the index of the entry (-1 if the entry is not found).
            </returns>
        </member>
        <member name="M:WGetNET.Extensions.ArrayExtensions.RemoveEmptyEntries(System.String[])">
            <summary>
            Removes empty entries from a <see langword="array"/> of <see cref="T:System.String"/>'s.
            </summary>
            <param name="array">
            The input <see langword="array"/> for the action.
            </param>
            <returns>
            The <see langword="array"/> with empty entries removed.
            </returns>
        </member>
        <member name="T:WGetNET.Extensions.StreamReaderExtensions">
            <summary>
            The <see langword="static"/> <see cref="T:WGetNET.Extensions.StreamReaderExtensions"/> class,
            provieds extension methods for the <see cref="T:System.IO.StringReader"/>.
            </summary>
        </member>
        <member name="M:WGetNET.Extensions.StreamReaderExtensions.ReadSreamOutputByLine(System.IO.StreamReader)">
            <summary>
            Reads the data from the process output to a string array.
            </summary>
            <param name="output">
            The <see cref="T:System.IO.StreamReader"/> with the process output.
            </param>
            <returns>
            A <see cref="T:System.String"/> array 
            containing the process output stream content by lines.
            </returns>
        </member>
        <member name="M:WGetNET.Extensions.StreamReaderExtensions.ReadSreamOutputByLineAsync(System.IO.StreamReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronous reads the data from the process output to a string array.
            </summary>
            <param name="output">
            The <see cref="T:System.IO.StreamReader"/> with the process output.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <returns>
            A <see cref="T:System.String"/> array 
            containing the process output stream content by lines.
            </returns>
        </member>
        <member name="T:WGetNET.Helper.ArgsHelper">
            <summary>
            Provides methods for argument checking and exception throwing.
            </summary>
        </member>
        <member name="M:WGetNET.Helper.ArgsHelper.ThrowIfStringIsNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws an exception if the given string is <see langword="null"/> or empty/whitespace.
            </summary>
            <param name="arg">
            The argument to check.
            </param>
            <param name="name">
            The name of the arument.
            </param>
            <exception cref="T:System.ArgumentException">
            The given string empty/whitespace.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The given string is null.
            </exception>
        </member>
        <member name="M:WGetNET.Helper.ArgsHelper.ThrowIfObjectIsNull(System.Object,System.String)">
            <summary>
            Throws a <see cref="T:System.ArgumentNullException"/> if the given object is <see langword="null"/>.
            </summary>
            <param name="arg">
            The argument to check.
            </param>
            <param name="name">
            The name of the arument.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The given object is <see langword="null"/>
            </exception>
        </member>
        <member name="M:WGetNET.Helper.ArgsHelper.ThrowIfWinGetObjectIsNullOrEmpty(WGetNET.IWinGetObject,System.String)">
            <summary>
            Throws an exception if the given winget object is <see langword="null"/> or empty.
            </summary>
            <param name="arg">
            The argument to check.
            </param>
            <param name="name">
            The name of the arument.
            </param>
            <exception cref="T:System.ArgumentException">
            The given winget object is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The given winget object is null.
            </exception>
        </member>
        <member name="M:WGetNET.Helper.ArgsHelper.ThrowIfPathIsInvalid(System.String)">
            <summary>
            Throws one of the listet exception if the path is invalid or cant be accessed.
            </summary>
            <param name="arg">
            The argument to check.
            </param>
            <exception cref="T:System.ArgumentException">
            The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="T:WGetNET.Helper.FileHelper">
            <summary>
            The <see langword="static"/> <see cref="T:WGetNET.Helper.FileHelper"/> class provides methods for working with files.
            </summary>
        </member>
        <member name="M:WGetNET.Helper.FileHelper.WriteTextToFile(System.String,System.String)">
            <summary>
            Writes the provided text to the given file.
            </summary>
            <param name="path">The file path.</param>
            <param name="text">The text to write to the file.</param>
            <exception cref="T:System.ArgumentException">
            Path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The root of the specified path is invalid.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Path specified a file that is read-only. 
            Or Path specified a file that is hidden.
            Or This operation is not supported on the current platform. 
            Or Path specified a directory. 
            Or The caller does not have the required permission.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.Helper.FileHelper.WriteTextToFileAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asyncounes writes the provided text to the given file.
            </summary>
            <param name="path">The file path.</param>
            <param name="text">The text to write to the file.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:System.Threading.Tasks.Task"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            Path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Path specified a file that is read-only. 
            Or Path specified a file that is hidden.
            Or This operation is not supported on the current platform. 
            Or Path specified a directory. 
            Or The caller does not have the required permission.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="T:WGetNET.Helper.JsonHelper">
            <summary>
            The <see langword="static"/> <see cref="T:WGetNET.Helper.JsonHelper"/> class,
            provieds methods for working with json.
            </summary>
        </member>
        <member name="M:WGetNET.Helper.JsonHelper.StringToObject``1(System.String)">
            <summary>
            Deserializes a given json <see cref="T:System.String"/> to a object of the given class.
            </summary>
            <typeparam name="T">
            Class type the json should be deserialized to.
            </typeparam>
            <param name="jsonString">
            A <see cref="T:System.String"/> containing the json to deserialize.
            </param>
            <returns>
            Object of the given class type.
            </returns>
            <exception cref="T:WGetNET.Exceptions.InvalidJsonException">
            The provided JSON could not be deserialized.
            </exception>
        </member>
        <member name="M:WGetNET.Helper.JsonHelper.GetJson(System.Object)">
            <summary>
            Serializes a json <see cref="T:System.String"/> from the provided object.
            </summary>
            <param name="input">The object to serialize.</param>
            <returns>
            A <see cref="T:System.String"/> containing the generated json.
            </returns>
        </member>
        <member name="T:WGetNET.Helper.PackageHelper">
            <summary>
            The <see langword="static"/> <see cref="T:WGetNET.Helper.PackageHelper"/> class provides methods for winget package processing.
            </summary>
        </member>
        <member name="M:WGetNET.Helper.PackageHelper.MatchExact(System.Collections.Generic.List{WGetNET.WinGetPackage},System.String)">
            <summary>
            Tries to match a <see cref="T:WGetNET.WinGetPackage"/> to the provided search criteria.
            </summary>
            <param name="matchList">
            The list to try and finde match in.
            </param>
            <param name="matchString">
            The search criteria, that will be tried to be matched againts the package id and/or name.
            </param>
            <returns>
            The <see cref="T:WGetNET.WinGetPackage"/> that matches the search criteria, or <see langword="null"/> if no package matches.
            </returns>
        </member>
        <member name="T:WGetNET.Helper.PathHelper">
            <summary>
            The <see langword="static"/> <see cref="T:WGetNET.Helper.PathHelper"/> class provides methods for working with different path types.
            </summary>
        </member>
        <member name="T:WGetNET.Helper.PathHelper.PathType">
            <summary>
            Enum for the selecetion of defferent path types.
            </summary>
        </member>
        <member name="M:WGetNET.Helper.PathHelper.TrimLastPathPart(System.String,WGetNET.Helper.PathHelper.PathType)">
            <summary>
            Removes the last directory from the given path.
            </summary>
            <param name="path">
            <see cref="T:System.String"/> containing the path that sould be trimed.
            </param>
            <param name="type">
            Selection of the path type for correct separator allocation.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing the trimed path.
            </returns>
        </member>
        <member name="T:WGetNET.Helper.SystemHelper">
            <summary>
            The <see langword="static"/> <see cref="T:WGetNET.Helper.SystemHelper"/> class provides methods for system related tasks.
            </summary>
        </member>
        <member name="M:WGetNET.Helper.SystemHelper.CheckAdministratorPrivileges">
            <summary>
            Check if the current user has administrator privileges.
            </summary>
            <returns>
            <see langword="true"/> if the current user has administrator privileges and
            <see langword="false"/> if not.
            </returns>
        </member>
        <member name="M:WGetNET.Helper.SystemHelper.CheckWingetInstallation">
            <summary>
            Checks if winget is installed on the system and returns the path to the executable.
            </summary>
            <returns>
            <see cref="T:System.String"/> containing the executable path if it was found or <see cref="F:System.String.Empty"/> if not. 
            </returns>
        </member>
        <member name="T:WGetNET.IWinGetObject">
            <summary>
            Interface for all winget related objects.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetObject.IsEmpty">
            <summary>
            Gets if the object is empty.
            </summary>
        </member>
        <member name="P:WGetNET.Models.ProcessResult.ExitCode">
            <summary>
            Gets or sets the exit code of the process.
            </summary>
        </member>
        <member name="P:WGetNET.Models.ProcessResult.Output">
            <summary>
            Gets or sets the output of the process.
            </summary>
        </member>
        <member name="P:WGetNET.Models.ProcessResult.Success">
            <summary>
            Gets if the process finished successfully.
            </summary>
        </member>
        <member name="T:WGetNET.Models.SettingsModel">
            <summary>
            Represents the global winget settings for parsing.
            </summary>
        </member>
        <member name="P:WGetNET.Models.SettingsModel.AdminSettings">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.Dictionary`2"/> of admin settings.
            </summary>
        </member>
        <member name="P:WGetNET.Models.SettingsModel.UserSettingsFile">
            <summary>
            Gets or sets the user settings file path.
            </summary>
        </member>
        <member name="T:WGetNET.Models.SourceModel">
            <summary>
            Represents a winget source for JSON parsing.
            </summary>
        </member>
        <member name="P:WGetNET.Models.SourceModel.Name">
            <summary>
            Gets or sets the name of the source.
            </summary>
        </member>
        <member name="P:WGetNET.Models.SourceModel.Arg">
            <summary>
            Gets or sets the arg of the source.
            </summary>
        </member>
        <member name="P:WGetNET.Models.SourceModel.Type">
            <summary>
            Gets or sets the type of the source.
            </summary>
        </member>
        <member name="P:WGetNET.Models.SourceModel.Data">
            <summary>
            Gets or sets the data of the source.
            </summary>
        </member>
        <member name="P:WGetNET.Models.SourceModel.Identifier">
            <summary>
            Gets or sets the identifier of the source.
            </summary>
        </member>
        <member name="P:WGetNET.Models.SourceModel.Explicit">
            <summary>
            Gets or sets whether the source was explicitly added.
            </summary>
        </member>
        <member name="P:WGetNET.Models.SourceModel.TrustLevel">
            <summary>
            Gets or sets the trust level of the source.
            </summary>
        </member>
        <member name="M:WGetNET.Models.SourceModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Models.SourceModel"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.Models.SourceModel.FromWinGetSource(WGetNET.WinGetSource)">
            <summary>
            Creates a <see cref="T:WGetNET.Models.SourceModel"/> instance from a <see cref="T:WGetNET.WinGetSource"/> instance.
            </summary>
            <param name="source">The <see cref="T:WGetNET.WinGetSource"/> instance.</param>
            <returns>
            The created <see cref="T:WGetNET.Models.SourceModel"/> instance.
            </returns>
        </member>
        <member name="T:WGetNET.Parser.VersionParser">
            <summary>
            Handels the parsing of strings to a <see cref="T:System.Version"/> instance.
            </summary>
        </member>
        <member name="M:WGetNET.Parser.VersionParser.CheckPreviewStatus(System.String)">
            <summary>
            Checks is the version <see cref="T:System.String"/> is a preview version.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to check.</param>
            <returns>
            <see langword="true"/> if the winget version is a preview version or <see langword="false"/> if not.
            </returns>
        </member>
        <member name="M:WGetNET.Parser.VersionParser.Parse(System.String)">
            <summary>
            Parses a <see cref="T:System.String"/> to a <see cref="T:System.Version"/> instance as best as possible.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to parse.</param>
            <returns>
            The created <see cref="T:System.Version"/> instance.
            </returns>
        </member>
        <member name="M:WGetNET.Parser.VersionParser.CleanParse(System.String)">
            <summary>
            Parses a <see cref="T:System.String"/> to a <see cref="T:System.Version"/> instance as best as possible.
            </summary>
            <remarks>
            This tries to resolve the string one by one to parse it.
            </remarks>
            <param name="input">The <see cref="T:System.String"/> to parse.</param>
            <returns>
            The created <see cref="T:System.Version"/> instance.
            </returns>
        </member>
        <member name="M:WGetNET.Parser.VersionParser.ParseToInt(System.String,System.Int32)">
            <summary>
            Parses a <see cref="T:System.String"/> to a <see cref="T:System.Int32"/> as best as possible.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to parse.</param>
            <param name="defaultValue">Default value that is used if the input can't be parsed.</param>
            <returns>
            The created <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:WGetNET.Parser.VersionParser.CleanParseToInt(System.String,System.Int32)">
            <summary>
            Parses a <see cref="T:System.String"/> to a <see cref="T:System.Int32"/> as best as possible.
            </summary>
            <remarks>
            This tries to clean the provided input <see cref="T:System.String"/>, 
            with minimal data loss, so it can be parsed to a <see cref="T:System.Int32"/>
            </remarks>
            <param name="input">The <see cref="T:System.String"/> to parse.</param>
            <param name="defaultValue">Default value that is used if the input can't be parsed.</param>
            <returns>
            The created <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:WGetNET.Parser.VersionParser.CleanupNumberString(System.String)">
            <summary>
            Cleans a <see cref="T:System.String"/>, with minimal version information loss, so it can be parsed to a <see cref="T:System.Int32"/>.
            </summary>
            <remarks>
            If the <see cref="T:System.String"/> looks lick this '123ABC456' it will not be cleaned, because to much information will be lost.
            </remarks>
            <param name="input">The <see cref="T:System.String"/> to clean up.</param>
            <returns>
            The processed <see cref="T:System.String"/>:
            </returns>
        </member>
        <member name="M:WGetNET.Parser.VersionParser.RemoveAppendix(System.String)">
            <summary>
            Removes version appendixes from the string.
            </summary>
            <remarks>
            An version appendix could look like this: '-preview', '-beta2' or '-pre'.
            </remarks>
            <param name="input">The <see cref="T:System.String"/> to process.</param>
            <returns>
            The processed <see cref="T:System.String"/>.
            </returns>
        </member>
    </members>
</doc>
String"/>, with minimal version information loss, so it can be parsed to a <see cref="T:System.Int32"/>.
            </summary>
            <remarks>
            If the <see cref="T:System.String"/> looks lick this '123ABC456' it will not be cleaned, because to much information will be lost.
            </remarks>
            <param name="input">The <see cref="T:System.String"/> to clean up.</param>
            <returns>
            The processed <see cref="T:System.String"/>:
            </returns>
        </member>
        <member name="M:WGetNET.Parser.VersionParser.RemoveAppendix(System.String)">
            <summary>
            Removes version appendixes from the string.
            </summary>
            <remarks>
            An version appendix could look like this: '-preview', '-beta2' or '-pre'.
            </remarks>
            <param name="input">The <see cref="T:System.String"/> to process.</param>
            <returns>
            The processed <see cref="T:System.String"/>.
            </returns>
        </member>
    </members>
</doc>
